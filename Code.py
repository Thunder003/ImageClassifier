# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13LRZT1E8APdVS_0QUR-0gqOoqZluejA6
"""

#Classification of Images
import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense, Flatten,Conv2D, MaxPooling2D, Dropout
from tensorflow.keras import layers
from keras.utils import to_categorical
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

from keras.datasets import cifar10
(x_train,y_train), (x_test,y_test)=cifar10.load_data()

print(type(x_train))
print(type(y_train))
print(type(x_test))
print(type(y_test))

index=1
print('X_train shape: ', x_train.shape)
print('Y_train shape: ', y_train.shape)
print('X_test shape: ', x_test.shape)
print('Y_test shape: ', y_test.shape)
plt.imshow(x_train[index])

classification=['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']
y_train_one_hot=to_categorical(y_train)
y_test_one_hot=to_categorical(y_test)

print(y_train_one_hot.shape)

print('The one hot label is:', y_train_one_hot[index])

x_train=x_train/255
y_train=y_train/255

#Model Architecture
model=Sequential()

model.add(Conv2D(32,(5,5),activation='relu', input_shape=(32,32,3)))

model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(32,(5,5),activation='relu'))

model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())

model.add(Dense(1000,activation='relu'))

model.add(Dropout(0.5))

model.add(Dense(500,activation='relu'))

model.add(Dropout(0.5))

model.add(Dense(250,activation='relu'))

model.add(Dense(10,activation='softmax'))

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

abc=model.fit(x_train,y_train_one_hot,batch_size=256, epochs=10,validation_split=0.2)

model.evaluate(x_test,y_test_one_hot)[1]

plt.plot(abc.history['accuracy'])
plt.plot(abc.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train','Val'],loc='upper left')
plt.show()

plt.plot(abc.history['loss'])
plt.plot(abc.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train','Val'],loc='upper right')
plt.show()

from google.colab import files
 uploaded=files.upload()

pl_img=plt.imread('plane.jpg')
img=plt.imshow(pl_img)

from skimage.transform import resize
ng=resize(pl_img,(32,32,3))
plt.imshow(ng)

predic=model.predict(np.array([ng]))
predic

list_index=[0,1,2,3,4,5,6,7,8,9]
x=predic
for i in range(10):
  for j in range(10):
    if x[0][list_index[i]]>x[0][list_index[j]]:
      temp=list_index[i]
      list_index[i]=list_index[j]
      list_index[j]=temp
print(list_index)

for i in range(5):
  print(classification[list_index[i]],':',round(predic[0][list_index[i]]*100,2),'%')

